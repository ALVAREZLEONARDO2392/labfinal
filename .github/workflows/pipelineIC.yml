name: workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      
jobs:
        SAST:
          runs-on: ubuntu-24.04
      
          steps:
            
            - name: Checkout Code
              uses: actions/checkout@v3
      
           
            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                node-version: '16' 
      
           
            - name: Install Dependencies
              run: |
                npm install 
                if [ -d "./functions" ]; then
                 cd ./functions
                  npm install 
                cd ..
                fi
      
            
            - name: Configure SonarCloud Scanner
              run: |
                echo "sonar.projectKey=ALVAREZLEONARDO2392_labfinal" >> sonar-project.properties
                echo "sonar.organization=alvarezleonardo2392" >> sonar-project.properties
                echo "sonar.host.url=https://sonarcloud.io" >> sonar-project.properties
                echo "sonar.login=${{ secrets.SONAR_TOKEN }}" >> sonar-project.properties
                echo "sonar.sources=." >> sonar-project.properties
                echo "sonar.exclusions=**/node_modules/**" >> sonar-project.properties
                echo "sonar.javascript.packageManager=npm" >> sonar-project.properties
            - name: Run SonarCloud Scanner
              run: npx sonar-scanner

            - name: Mirar reglas de sonar
              run: |
                
                RESPONSE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
                  "https://sonarcloud.io/api/measures/component?component=ALVAREZLEONARDO2392_labfinal&metricKeys=security_rating,reliability_rating,bugs,vulnerabilities,code_smells,coverage")
            
                
                SECURITY_RATING=$(echo $RESPONSE | jq -r '.component.measures[] | select(.metric=="security_rating").value')
                RELIABILITY_RATING=$(echo $RESPONSE | jq -r '.component.measures[] | select(.metric=="reliability_rating").value')
                VULNERABILITIES=$(echo $RESPONSE | jq -r '.component.measures[] | select(.metric=="vulnerabilities").value')
                COVERAGE=$(echo $RESPONSE | jq -r '.component.measures[] | select(.metric=="coverage").value')
            
                echo "Security Rating: $SECURITY_RATING"
                echo "Reliability Rating: $RELIABILITY_RATING"
                echo "Vulnerabilities: $VULNERABILITIES"
                echo "Coverage: $COVERAGE"

                if [ "$VULNERABILITIES" -gt 0 ]; then
                  echo "Se encuentran vulnerabilidades: $VULNERABILITIES. Botando pipeline...."
                  exit 1
                fi

          
        Dependency-Check:

          runs-on: ubuntu-latest
          needs: SAST

          steps:

            - name: Run OWASP Dependency-Check
              uses: dependency-check/Dependency-Check_Action@main
              with:
                project: 'labfinal'
                path: '.'
                format: 'HTML'
                out: 'dependency-check-report'
                args: '--failOnCVSS 20'
           ###### art     
            - name: Upload Dependency-Check Report
              uses: actions/upload-artifact@v3
              with:
                  name: dependency-check-report
                  path: dependency-check-report/dependency-check-report.html

    
        push_to_registry:
          name: Push Docker image to Docker Hub
          runs-on: ubuntu-latest
          permissions:
            packages: write
            contents: read
            attestations: write
            id-token: write
          steps:
            - name: Check out the repo
              uses: actions/checkout@v4

            - name: Log in to Docker Hub
              uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_PASSWORD }}

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
              with:
                images: rene0311/my-docker-hub-repository

            - name: Build Docker image
              id: build
              uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

            - name: Install Docker Scout
              run: |
                    curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
                
            - name: Run Docker Scout Scan
              run: |
                    echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
                    docker scout quickview
                    docker scout cves
              
          








