name: workflow
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    name: Run unit tests and SAST scan on the source code 
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'
        cache: maven
    - name: Build with Maven cloud
      run:  mvn -B verify sonar:sonar -Dsonar.projectKey=javaprojectreachability -Dsonar.organization=javaprojectreachability -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=$SONAR_TOKEN
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  security:
    runs-on: ubuntu-latest
    needs: build
    name: Run the SCA scan on the source code
    steps:
      - uses: actions/checkout@master
      - name: RunSnyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  zap_scan:
    runs-on: ubuntu-latest
    needs: security
    name: Run DAST scan on the web application
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.6.1
        with:
          docker_name: 'owasp/zap2docker-stable'
          target: 'http://testphp.vulnweb.com/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'



# jobs:
#   SAST:
#     runs-on: ubuntu-24.04
    
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Set up JDK 17
#         uses: actions/setup-java@v2
#         with:
#           java-version: '17'
#           distribution: 'adopt'

#       - name: Set enviroment variables
#         run: echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV

      

      # - name: Validate and configure build.gradle
      #   env:
      #     SONAR_TOKEN: $${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     if [ -f "package-lock.json" ]; then
      #       echo "Encontró el archivo"
      #       echo "Verificando configuración del plugin sonar"
      #       if ! grep -q 'id "org.sonarqube" version "3.3"' package-lock.json; then
      #         sed -i '/id '\''java'\''/a \ \ \ \ id '\''org.sonarqube'\'' version '\' version '\''3.3'\''' package-lock.json
      #         echo "Plugin de Sonarcloud añadido en package json"
      #       else
      #         echo "Plugin de sonarcloud ya está configurado en package-lock.json"
      #       fi






            
      #       else
      #       echo "no se encontró archivo package-lock.json"
            
      #       exit 1
      #     fi